n = int(input())

def fibo(n):
    fibo = [0]*(n+1)
    for i in range(n+1):
        if(i == 0):
            fibo[0] = 1
        elif(i == 1):
            fibo[1] = 0
        else:
            fibo[i] = fibo[i-1] + fibo[i-2]
    return fibo[n]

for i in range(n):
    num = int(input())
    print('{} {}'.format(fibo(num),fibo(num+1)))
    
'''
기존 피보나치 함수는 재귀 방식으로 똑같은 함수의 호출이 지속되어 O(2^N)의 시간 복잡도를 가진다.
하지만 다이나믹 프로그래밍으로 구현 할 시, 같은 함수의 호출을 방지하여 시간복잡도가 O(N)으로 줄어든다.

다이나믹 프로그래밍은 기존의 결과를 재사용 하는 것이 핵심이다.
수식을 점화식으로 도출한 다음, 기존의 결과를 재사용하여 시간복잡도를 줄이는 것이 목표이다.

따라서 위에 식도 재귀적으로 함수를 호출 하는 것이 아닌, fibo 리스트를 만들어 기존의 결과를 저장해 불필요한 함수의 호출을 방지한다.

다양한 문제를 통해 다이나믹 프로그래밍을 익숙하게 하는 것이 중요하다 생각한다.
'''
